{"chunk":1,"numChunks":3,"fileHash":"EJYhNljzF+d5mZhVw6YgFBtWyRiuPPrk0yQU7xQoveI=","filePath":"scripts/migration","content":"    if [ -n \"${OTPUT}\" ]; then\n      echo \"${OTPUT}\"\n      echo\n    fi\n  else\n    if [ -d ${ROOT_PATH}/.vscode/migrate_tmp ]; then\n      rm -rf ${ROOT_PATH}/.vscode/migrate_tmp\n    fi\n    print_answer \"ERROR\" red\n    echo \"Parameters not passed\"\n    echo\n    echo \"$0 <command> [option...]\"\n    echo\n    echo \"command:\"\n    print_help \"<empty>\" \"Core version\"\n    print_help test \"Test version\"\n    print_help dev \"Development fixtures\"\n    echo\n    echo \"option:\"\n    print_help create \"Create cleare migration\"\n    print_help up \"Migrate the DB to the most recent version available\"\n    print_help up1 \"Migrate the DB up by 1\"\n    print_help down \"Roll back all migrations\"\n    print_help down1 \"Roll back the version by 1\"\n    print_help redo \"Re-run the latest migration\"\n    print_help status \"Dump the migration status for the current DB\"\n  fi\n}\n\nif [[ $MIGRATION == \"test\" ]]; then\n  print_header \"Migrations sql $MIGRATION:$GOOSE_ACTION\"\n\n  if [ \"$MIGRATION\" == \"test\" ]; then\n    mkdir -p \"${MIGRATION_DIR_TMP}\"\n    for file_migrate in $(find ${ROOT_PATH} -path '*/fixtures/migration/*' | sort -r); do\n      cp \"$file_migrate\" ${MIGRATION_DIR_TMP}/\n    done\n    MIGRATION_DIR=${MIGRATION_DIR_TMP}\n    DB_POSTFIX=${DB_POSTFIX}\"_test\"\n  fi\n  run_goose $GOOSE_ACTION\nelif [[ $MIGRATION == \"dev\" ]]; then\n  arr_goose=(up down reset)\n  if [[ \" ${arr_goose[*]} \" =~ \" $GOOSE_ACTION \" ]]; then\n    SOURCE=${BASH_SOURCE[0]}\n"}