{"chunk":5,"numChunks":7,"fileHash":"5AYblwm6C9jOmbWeNdgaeHg1BchKJpa79BOSp3ALZW0=","filePath":"internal/queries/setting.go","content":"package queries\nfunc (q *SettingQueries) GetSettingByGroup(ctx context.Context, settings any) (any, error) {\n\tfieldMap := q.GroupFieldMap(settings)\n\n\tif fieldMap == nil {\n\t\treturn nil, errors.ErrSettingNotFound\n\t}\n\n\tkeys := make([]any, 0, len(fieldMap))\n\tfor k := range fieldMap {\n\t\tkeys = append(keys, k)\n\t}\n\n\tquery := fmt.Sprintf(\"SELECT key, value FROM setting WHERE key IN (%s)\", strings.Repeat(\"?, \", len(keys)-1)+\"?\")\n\trows, err := q.DB.QueryContext(ctx, query, keys...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar key, value string\n\t\terr := rows.Scan(&key, &value)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif fieldPtr, ok := fieldMap[key]; ok {\n\t\t\tswitch ptr := fieldPtr.(type) {\n\t\t\tcase *string:\n\t\t\t\t*ptr = value\n\t\t\tcase *bool:\n\t\t\t\tbValue, err := strconv.ParseBool(value)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\t*ptr = bValue\n\t\t\tcase *int:\n\t\t\t\tiValue, err := strconv.Atoi(value)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\t*ptr = iValue\n\t\t\t}\n\t\t}\n\t}\n\n\treturn settings, nil\n}\n// UpdateSettingByGroup updates the settings in the database using a transaction.\n// It takes a context and a settings object of any type as arguments."}