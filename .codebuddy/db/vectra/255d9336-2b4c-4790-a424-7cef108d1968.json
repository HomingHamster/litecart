{"chunk":2,"numChunks":3,"fileHash":"AfCyQ6Snlb+SlFVONwpxveJBuIYNmZ3EjocmeC7ltq4=","filePath":"internal/queries/pages.go","content":"package queries\nfunc (q *PageQueries) Page(ctx context.Context, slug string) (*models.Page, error) {\n\tpage := models.Page{\n\t\tSlug: slug,\n\t}\n\n\tvar content, seo sql.NullString\n\tquery := `SELECT id, name, content, active, seo FROM page WHERE slug = ?`\n\terr := q.DB.QueryRowContext(ctx, query, slug).Scan(&page.ID, &page.Name, &content, &page.Active, &seo)\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn nil, errors.ErrPageNotFound\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tpage.Content = &content.String\n\tif seo.Valid {\n\t\tif err = json.Unmarshal([]byte(seo.String), &page.Seo); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn &page, nil\n}\n// AddPage inserts a new page into the database and returns the created page or an error.\nfunc (q *PageQueries) AddPage(ctx context.Context, page *models.Page) (*models.Page, error) {\n\tpage.ID = security.RandomString()\n\tpage.Active = false\n\n\tquery := `INSERT INTO page (id, name, slug, position) VALUES (?, ?, ?, ?) RETURNING strftime('%s', created)`\n\tstmt, err := q.DB.PrepareContext(ctx, query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer stmt.Close()\n\n\terr = stmt.QueryRowContext(ctx, query, page.ID, page.Name, page.Slug, page.Position).Scan(&page.Created)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn page, nil\n}\n// UpdatePage updates the details of a page in the database."}