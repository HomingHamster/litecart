{"chunk":3,"numChunks":9,"fileHash":"QZ9HSztfAPTAK+jz/PH8NqcGg/fNPvUV/NhCsYhVn58=","filePath":"internal/queries/cart.go","content":"package queries\nfunc (q *CartQueries) UpdateCart(ctx context.Context, cart *models.Cart) error {\n\tvar (\n\t\targs []interface{}\n\t\tsql  strings.Builder\n\t)\n\n\tsql.WriteString(\"UPDATE cart SET \")\n\n\tif cart.PaymentID != \"\" {\n\t\tsql.WriteString(\"payment_id = ?, \")\n\t\targs = append(args, cart.PaymentID)\n\t}\n\n\tif cart.PaymentStatus != \"\" {\n\t\tsql.WriteString(\"payment_status = ?, \")\n\t\targs = append(args, cart.PaymentStatus)\n\t}\n\n\tsql.WriteString(\"updated = datetime('now') WHERE id = ?\")\n\targs = append(args, cart.ID)\n\n\t_, err := q.DB.ExecContext(ctx, sql.String(), args...)\n\treturn err\n}\n// CartLetterPayment is ...\nfunc (q *CartQueries) CartLetterPayment(ctx context.Context, email, amountPayment, paymentURL string) (*models.MessageMail, error) {\n\tmailLetter, err := db.GetSettingByKey(ctx, \"site_name\", \"mail_letter_payment\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tletterTemplate := models.Letter{}\n\tif err := json.Unmarshal([]byte(mailLetter[\"mail_letter_payment\"].Value.(string)), &letterTemplate); err != nil {\n\t\treturn nil, err\n\t}\n\n\tmail := &models.MessageMail{\n\t\tTo:     email,\n\t\tLetter: letterTemplate,\n\t\tData: map[string]string{\n\t\t\t\"Payment_URL\":    paymentURL,\n\t\t\t\"Site_Name\":      mailLetter[\"site_name\"].Value.(string),\n\t\t\t\"Amount_Payment\": amountPayment,\n\t\t},\n\t}\n\n\treturn mail, nil\n}\n// CartLetterPurchase is ..."}