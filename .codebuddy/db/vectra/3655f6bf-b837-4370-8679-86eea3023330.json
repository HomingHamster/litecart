{"chunk":0,"numChunks":1,"fileHash":"7xjbFL43jBuj1yXmJvuETKkGcNQyv9/KdkzBfBnUaSs=","filePath":"pkg/litepay/helper.go","content":"package litepay\nimport (\n\t\"crypto\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/sha1\"\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"encoding/pem\"\n\t\"errors\"\n\t\"io\"\n)\nfunc findInSlice(slice []string, value string) bool {\n\tfor _, val := range slice {\n\t\tif val == value {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\nfunc signMessage(message, privKey string) (string, error) {\n\tblock, _ := pem.Decode([]byte(privKey))\n\tif block == nil {\n\t\treturn \"\", errors.New(\"invalid private key\")\n\t}\n\n\tparsedKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tprivateKey, ok := parsedKey.(*rsa.PrivateKey)\n\tif !ok {\n\t\treturn \"\", errors.New(\"key is not a valid RSA private key\")\n\t}\n\n\thash := sha1.Sum([]byte(message))\n\tsignature, err := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA1, hash[:])\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn base64.StdEncoding.EncodeToString(signature), nil\n}\nfunc parseBody(r io.Reader) (map[string]any, error) {\n\tvar data map[string]any\n\n\tbody, err := io.ReadAll(r)\n\tif err != nil {\n\t\treturn nil, errors.New(\"error reading request body\")\n\t}\n\n\tif len(body) > 0 {\n\t\tif err := json.Unmarshal(body, &data); err != nil {\n\t\t\treturn nil, errors.New(\"error decoding request body\")\n\t\t}\n\t}\n\n\treturn data, nil\n}\n// StatusPayment is ..."}