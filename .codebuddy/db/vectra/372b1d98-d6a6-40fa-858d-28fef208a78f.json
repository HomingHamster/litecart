{"chunk":0,"numChunks":1,"fileHash":"TavnPTCHWv2LYFBbxyxf0GtaR6gdktbpkbO8eobkxyc=","filePath":"pkg/archive/zip.go","content":"package archive\nimport (\n\t\"archive/zip\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\ntype ZipArchive struct {\n\tdir  string\n\tzipw *zip.Writer\n\tfile io.Closer\n}\n// NewZipArchive is ...\nfunc NewZipArchive(w io.WriteCloser) Archive {\n\treturn &ZipArchive{\"\", zip.NewWriter(w), w}\n}\n// Directory is ...\nfunc (a *ZipArchive) Directory(name string) error {\n\ta.dir = name + \"/\"\n\treturn nil\n}\n// Header is ...\nfunc (a *ZipArchive) Header(fi os.FileInfo) (io.Writer, error) {\n\thead, err := zip.FileInfoHeader(fi)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"can't make zip header: %v\", err)\n\t}\n\thead.Name = a.dir + head.Name\n\thead.Method = zip.Deflate\n\tw, err := a.zipw.CreateHeader(head)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"can't add zip header: %v\", err)\n\t}\n\treturn w, nil\n}\n// Close is ...\nfunc (a *ZipArchive) Close() error {\n\tif err := a.zipw.Close(); err != nil {\n\t\treturn err\n\t}\n\treturn a.file.Close()\n}\n// Extract extracts the zip archive at src to dest."}