{"chunk":9,"numChunks":15,"fileHash":"8k4FlTUnMf07dAju0be0NC0/K8xARV1JpkKBM3DCrfY=","filePath":"internal/handlers/public/cart.go","content":"package handlers\nfunc PaymentCallback(c *fiber.Ctx) error {\n\tlog := logging.New()\n\tpayment := &litepay.Payment{\n\t\tCartID:        c.Query(\"cart_id\"),\n\t\tPaymentSystem: litepay.PaymentSystem(c.Query(\"payment_system\")),\n\t}\n\n\tswitch payment.PaymentSystem {\n\t// case litepay.STRIPE:\n\t//\treturn webutil.Response(c, fiber.StatusOK, \"Callback\", payment)\n\tcase litepay.SPECTROCOIN:\n\t\tresponse := new(litepay.CallbackSpectrocoin)\n\t\tif err := c.BodyParser(response); err != nil {\n\t\t\tlog.ErrorStack(err)\n\t\t\treturn webutil.StatusBadRequest(c, err.Error())\n\t\t}\n\t\tpayment.Status = litepay.StatusPayment(litepay.SPECTROCOIN, string(rune(response.Status)))\n\t\tpayment.MerchantID = response.MerchantApiID\n\t\tpayment.Coin = &litepay.Coin{\n\t\t\tAmountTotal: response.ReceiveAmount,\n\t\t\tCurrency:    response.ReceiveCurrency,\n\t\t}\n\t}\n\n\tdb := queries.DB()\n\terr := db.UpdateCart(c.Context(), &models.Cart{\n\t\tCore: models.Core{\n\t\t\tID: payment.CartID,\n\t\t},\n\t\tPaymentID:     payment.MerchantID,\n\t\tPaymentStatus: payment.Status,\n\t\tPaymentSystem: payment.PaymentSystem,\n\t})\n\tif err != nil {\n\t\tlog.ErrorStack(err)\n\t\treturn webutil.StatusInternalServerError(c)\n\t}\n\n\t// send email\n\tif payment.Status == litepay.PAID {\n\t\tif err := mailer.SendCartLetter(payment.CartID); err != nil {\n\t\t\tlog.ErrorStack(err)\n\t\t\treturn webutil.StatusInternalServerError(c)\n\t\t}\n\t}"}