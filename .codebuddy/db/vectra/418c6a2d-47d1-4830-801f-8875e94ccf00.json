{"chunk":0,"numChunks":3,"fileHash":"EJYhNljzF+d5mZhVw6YgFBtWyRiuPPrk0yQU7xQoveI=","filePath":"scripts/migration","content":"#!/usr/bin/env bash\n\n#set -e\n\nROOT_PATH=\"$(git rev-parse --show-toplevel)\"\nsource ${ROOT_PATH}/scripts/_helper\n\nMIGRATION_DIR=${ROOT_PATH}/migrations\nMIGRATION_DIR_TMP=${ROOT_PATH}/.vscode/migrate_tmp\nLC_UPLOADS_DIR=${ROOT_PATH}/cmd/lc_uploads\nLC_DIGITALS_DIR=${ROOT_PATH}/cmd/lc_digitals\nLC_BASE_DIR=\"${ROOT_PATH}/cmd/lc_base\"\nLC_BASE=\"${LC_BASE_DIR}/data.db\"\n\nDB_POSTFIX=\"migrate_db_version\"\nMIGRATION=$1\nGOOSE_ACTION=$2\n\n\nmkdir -p \"${LC_BASE_DIR}\"\nif ! [ -f \"${LC_BASE}\" ]; then\n  sqlite3 \"${LC_BASE}\" \"PRAGMA auto_vacuum;\"\nfi\n\nrun_goose() {\n  arr_goose=(\"create\" \"up\" \"up1\" \"down\" \"down1\" \"redo\" \"status\")\n  if [[ \" ${arr_goose[*]} \" =~ \" $1 \" ]]; then\n    GOOSE_CMD=\"goose -dir $MIGRATION_DIR -table $DB_POSTFIX sqlite3 ${LC_BASE}\"\n\n    case \"$1\" in\n    \"create\") OTPUT=$($GOOSE_CMD create migration_name sql 2>&1) ;;\n    \"up\") OTPUT=$($GOOSE_CMD up 2>&1) ;;\n    \"up1\") OTPUT=$($GOOSE_CMD up-by-one 2>&1) ;;\n    \"down\") OTPUT=$($GOOSE_CMD reset 2>&1) ;;\n    \"down1\") OTPUT=$($GOOSE_CMD down 2>&1) ;;\n    \"redo\") OTPUT=$($GOOSE_CMD redo 2>&1) ;;\n    \"status\") OTPUT=$($GOOSE_CMD status 2>&1) ;;\n    esac\n\n    rm -rf ${ROOT_PATH}/.vscode/migrate_tmp\n\n    print_answer \"SUCCESS\" green\n"}