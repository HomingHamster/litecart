{"chunk":0,"numChunks":1,"fileHash":"+7hxidv9hXQF+HP//HkBiT5zbX1SoCimeanU3uGyuBE=","filePath":"internal/queries/session.go","content":"package queries\n\nimport (\n\t\"context\"\n\t\"time\"\n)\n\n// GetSession retrieves the session value for a given key if it hasn't expired.\n// It takes a context and key as arguments and returns the session value and an error if any.\nfunc (q *SettingQueries) GetSession(ctx context.Context, key string) (string, error) {\n\tvar value string\n\texpires := time.Now().Unix()\n\terr := q.DB.QueryRowContext(ctx, `SELECT value FROM session WHERE key = ? AND expires > ?`, key, expires).Scan(&value)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn value, nil\n}\n\n// AddSession is a method on the SettingQueries struct that adds a new session to the database.\n// It takes a context, a key-value pair representing the session data, and an expiration timestamp.\nfunc (q *SettingQueries) AddSession(ctx context.Context, key, value string, expires int64) error {\n\t_, err := q.DB.ExecContext(ctx, `INSERT INTO session (key, value, expires) VALUES (?, ?, ?)`, key, value, expires)\n\treturn err\n}\n\n// UpdateSession updates the session with a new value and expiration time for a given key.\n// It takes a context, a session key, the new value to be set, and the new expiration time as arguments.\nfunc (q *SettingQueries) UpdateSession(ctx context.Context, key, value string, expires int64) error {\n\t_, err := q.DB.ExecContext(ctx, `UPDATE session SET value = ?, expires = ? WHERE key = ? `, value, expires, key)\n\treturn err\n}\n\n// DeleteSession removes a session from the database based on the provided key.\nfunc (q *SettingQueries) DeleteSession(ctx context.Context, key string) error {\n\t_, err := q.DB.ExecContext(ctx, `DELETE FROM session WHERE key = ?`, key)\n\treturn err\n}\n"}