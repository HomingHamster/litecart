{"chunk":1,"numChunks":4,"fileHash":"G6dlSmqav4lXHGSZSVz1qW7mVIEhz6QMW+zjcZm8ERI=","filePath":"web/admin/src/components/Editor.vue","content":"  { name: 'paragraph', method: 'toggleParagraph', icon: 'paragraph', activeCondition: { type: 'paragraph' } },\n\n  { name: 'h1', method: 'toggleHeading', icon: 'h1', activeCondition: { type: 'heading', options: { level: 1 } } },\n  { name: 'h2', method: 'toggleHeading', icon: 'h2', activeCondition: { type: 'heading', options: { level: 2 } } },\n  { name: 'h3', method: 'toggleHeading', icon: 'h3', activeCondition: { type: 'heading', options: { level: 3 } } },\n\n  { name: 'bulletlist', method: 'toggleBulletList', icon: 'bulletlist', activeCondition: { type: 'bulletList' } },\n  { name: 'orderedList', method: 'toggleOrderedList', icon: 'orderedlist', activeCondition: { type: 'orderedList' } },\n  { name: 'blockquote', method: 'toggleBlockquote', icon: 'blockquote', activeCondition: { type: 'blockquote' } },\n]\n\nconst performEditorAction = (method, options) => {\n  editor.value.chain().focus()[method](options).run();\n}\nconst canPerformEditorAction = (method) => {\n  if (method === \"undo\" || method === \"redo\") {\n    return !editor.value.can().chain().focus()[method]().run();\n  }\n  return null\n}\n\nonMounted(() => {\n  editor.value = new Editor({\n    extensions: [StarterKit, Placeholder.configure({\n      placeholder: props.placeholder,\n    })],\n    content: props.modelValue,\n    onUpdate: () => {\n      emits(\"update:modelValue\", editor.value.getHTML());\n    },\n  });\n});\n\nonBeforeUnmount(() => {\n  editor.value.destroy();\n});\n\nwatch(\n  () => props.modelValue"}