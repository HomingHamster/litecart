{"chunk":11,"numChunks":16,"fileHash":"UXEJ+5LDhCVJB9FlFkrbRROxDBKQAS/5LQ4ry9WZVlc=","filePath":"internal/queries/products.go","content":"package queries\nfunc (q *ProductQueries) DeleteProductImageRecord(ctx context.Context, productID, imageID string) (string, string, error) {\n    tx, err := q.DB.BeginTx(ctx, nil)\n    if err != nil {\n        return \"\", \"\", err\n    }\n    defer tx.Rollback()\n\n    var name, ext string\n    err = tx.QueryRowContext(ctx, `SELECT name, ext FROM product_image WHERE id = ?`, imageID).Scan(&name, &ext)\n    if err != nil {\n        return \"\", \"\", err\n    }\n\n    if _, err := tx.ExecContext(ctx, `DELETE FROM product_image WHERE id = ? AND product_id = ?`, imageID, productID); err != nil {\n        return \"\", \"\", err\n    }\n\n    if err := tx.Commit(); err != nil {\n        return \"\", \"\", err\n    }\n\n    return name, ext, nil\n}\nfunc DeleteImageFiles(name, ext string) error {\n    filePaths := []string{\n        fmt.Sprintf(\"./lc_uploads/%s.%s\", name, ext),\n        fmt.Sprintf(\"./lc_uploads/%s_sm.%s\", name, ext),\n    }\n\n    var removeErrors []error\n    for _, filePath := range filePaths {\n        if err := os.Remove(filePath); err != nil {\n            removeErrors = append(removeErrors, fmt.Errorf(\"failed to remove file %s: %w\", filePath, err))\n        }\n    }\n\n    if len(removeErrors) > 0 {\n        var combinedError error\n        for _, err := range removeErrors {\n            combinedError = fmt.Errorf(\"%v; %w\", combinedError, err)\n        }\n        return fmt.Errorf(\"one or more files could not be removed: %w\", combinedError)\n    }\n\n    return nil\n}"}