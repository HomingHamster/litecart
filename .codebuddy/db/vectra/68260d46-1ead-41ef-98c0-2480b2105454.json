{"chunk":0,"numChunks":1,"fileHash":"IlsPXXoHuRBDyS0p6fPF0IIDArmbt683Ob2JweQg3Qg=","filePath":"pkg/security/password.go","content":"package security\n\nimport (\n\t\"crypto/md5\"\n\t\"encoding/hex\"\n\n\t\"golang.org/x/crypto/bcrypt\"\n)\n\n// NormalizePassword func for a returning the users input as a byte slice.\nfunc NormalizePassword(p string) []byte {\n\treturn []byte(p)\n}\n\n// GeneratePassword func for a making hash & salt with user password.\nfunc GeneratePassword(p string) string {\n\tbytePwd := NormalizePassword(p)\n\n\thash, err := bcrypt.GenerateFromPassword(bytePwd, bcrypt.MinCost)\n\tif err != nil {\n\t\treturn err.Error()\n\t}\n\n\treturn string(hash)\n}\n\n// ComparePasswords func for a comparing password.\nfunc ComparePasswords(hashedPwd, inputPwd string) bool {\n\tbyteHash := NormalizePassword(hashedPwd)\n\tbyteInput := NormalizePassword(inputPwd)\n\n\tif err := bcrypt.CompareHashAndPassword(byteHash, byteInput); err != nil {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n// NewToken ...\nfunc NewToken(text string) (string, error) {\n\thash, err := bcrypt.GenerateFromPassword([]byte(text), bcrypt.DefaultCost)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tnewMD5 := md5.New()\n\tnewMD5.Write(hash)\n\treturn hex.EncodeToString(newMD5.Sum(nil)), nil\n}\n"}