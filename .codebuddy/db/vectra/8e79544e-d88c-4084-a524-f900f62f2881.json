{"chunk":5,"numChunks":7,"fileHash":"uGqTN4rV0zsU/GWluD0mH60Iqkfxyh88yA44W8jyI/4=","filePath":"internal/queries/cart.go","content":"package queries\nfunc (q *CartQueries) processDigitalContent(ctx context.Context, cartID string, products []models.CartProduct) (*purchaseContent, error) {\n\ttx, err := q.DB.BeginTx(ctx, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer tx.Rollback()\n\n\tcontent := &purchaseContent{\n\t\tkeys:  make([]models.Data, 0),\n\t\tfiles: make([]models.File, 0),\n\t}\n\n\tfor _, cart := range products {\n\t\tif err := q.processProduct(ctx, tx, cartID, cart, content); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif err := tx.Commit(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn content, nil\n}\nfunc (q *CartQueries) generatePurchaseEmail(ctx context.Context, email string, content *purchaseContent) (*models.MessageMail, error) {\n\tpurchases := q.formatPurchaseContent(content)\n\n\tmailLetter, err := db.GetSettingByKey(ctx, \"email\", \"mail_letter_purchase\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmail := &models.MessageMail{\n\t\tTo: email,\n\t}\n\n\tif err := json.Unmarshal([]byte(mailLetter[\"mail_letter_purchase\"].Value.(string)), &mail.Letter); err != nil {\n\t\treturn nil, err\n\t}\n\n\tmail.Data = map[string]string{\n\t\t\"Purchases\":   purchases,\n\t\t\"Admin_Email\": mailLetter[\"email\"].Value.(string),\n\t}\n\tmail.Files = content.files\n\n\treturn mail, nil\n}"}