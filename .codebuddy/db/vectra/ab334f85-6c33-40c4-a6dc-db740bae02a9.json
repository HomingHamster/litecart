{"chunk":0,"numChunks":1,"fileHash":"OlGjUvLo9OhsNAIYWvntURuHustrbvsNeZRAL1oW+lQ=","filePath":"pkg/jwtutil/parser.go","content":"package jwtutil\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"github.com/google/uuid\"\n)\n\n// TokenMetadata struct to describe metadata in JWT.\ntype TokenMetadata struct {\n\tID      string\n\tExpires int64\n}\n\n// ExtractTokenMetadata func to extract metadata from JWT.\nfunc ExtractTokenMetadata(c *fiber.Ctx, secret string) (*TokenMetadata, error) {\n\ttoken, err := verifyToken(c, secret)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclaims, ok := token.Claims.(jwt.MapClaims)\n\tif ok && token.Valid {\n\t\tid, err := uuid.Parse(claims[\"id\"].(string))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\texpires := int64(claims[\"expires\"].(float64))\n\t\treturn &TokenMetadata{\n\t\t\tID:      id.String(),\n\t\t\tExpires: expires,\n\t\t}, nil\n\t}\n\n\treturn nil, err\n}\n\nfunc verifyToken(c *fiber.Ctx, secret string) (*jwt.Token, error) {\n\ttoken, err := jwt.Parse(c.Cookies(\"token\"), func(token *jwt.Token) (interface{}, error) {\n\t\treturn []byte(secret), nil\n\t})\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn token, nil\n}\n"}