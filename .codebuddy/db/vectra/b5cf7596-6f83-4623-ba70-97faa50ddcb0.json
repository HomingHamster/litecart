{"chunk":0,"numChunks":1,"fileHash":"bQ5SirS0IpZPHAevDLCt6dkJn25EhO4tSFfkLFILth4=","filePath":"pkg/fsutil/file.go","content":"package fsutil\nimport (\n\t\"io\"\n\t\"os\"\n\t\"path\"\n)\n// some commonly flag consts for open file\nconst (\n\tFsCWAFlags = os.O_CREATE | os.O_WRONLY | os.O_APPEND // create, append write-only\n\tFsCWTFlags = os.O_CREATE | os.O_WRONLY | os.O_TRUNC  // create, override write-only\n\tFsCWFlags  = os.O_CREATE | os.O_WRONLY               // create, write-only\n\tFsRFlags   = os.O_RDONLY                             // read-only\n)\n// IsFile reports whether the named file or directory exists.\nfunc IsFile(path string) bool {\n\tif path == \"\" || len(path) > 468 {\n\t\treturn false\n\t}\n\n\tif fi, err := os.Stat(path); err == nil {\n\t\treturn !fi.IsDir()\n\t}\n\treturn false\n}\n// OpenFile like os.OpenFile, but will auto create dir.\nfunc OpenFile(filepath string, flag int, perm os.FileMode) (*os.File, error) {\n\tfileDir := path.Dir(filepath)\n\tif err := os.MkdirAll(fileDir, 0775); err != nil {\n\t\treturn nil, err\n\t}\n\n\tfile, err := os.OpenFile(filepath, flag, perm)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn file, nil\n}\n// WriteOSFile write data to give os.File, then close file.\n// data type allow: string, []byte, io.Reader"}