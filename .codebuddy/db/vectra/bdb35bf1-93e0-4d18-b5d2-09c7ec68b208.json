{"chunk":0,"numChunks":3,"fileHash":"kIBetEAzR/AJWHTUcNNbUw+px0FbSEkXzMc8NguEWBE=","filePath":"scripts/_helper","content":"#!/bin/bash\n\n# The following line uses the `uname` command to get the machine's architecture and assigns it to the variable `ARCH`.\nARCH=$(uname -m)\ncase $ARCH in\ni386) ARCH=\"386\" ;;\ni686) ARCH=\"386\" ;;\nx86_64) ARCH=\"amd64\" ;;\nesac\n\n# The following line uses the `uname` command to get the name of the operating system and assigns it to the variable `OS`.\n# return Linux, Darwin, Windows\nOS=$(uname -s)\n\n# Init color\nCOLOR_GREY=$(tput setaf 0)\nCOLOR_RED=$(tput setaf 1)\nCOLOR_GREEN=$(tput setaf 2)\nCOLOR_YELLOW=$(tput setaf 3)\nCOLOR_RESET=$(tput sgr0)\n\nGOPATH=$(go env GOPATH)\nGOBIN=$(go env GOPATH)/bin\n\nDATE=$(date '+%Y-%m-%d-%H:%M:%S')\nGIT_COMMIT=$(git rev-parse --short HEAD)\nGIT_DIRTY=$(test -n \"$(git status --porcelain)\" && echo \"+CHANGES\" || true)\nGIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null)\nVERSION=${GIT_TAG#*v}\n\nmaybe_sudo() {\n  if [ \"$(id -u)\" -ne 0 ]; then\n    sudo \"$@\"\n  else\n    \"$@\"\n  fi\n}\n\n# This function checks if the architecture of the system running the script is supported.\nsupport_arch() {\n  if [ \"$ARCH\" != \"amd64\" ]; then\n    print_answer \"ERROR\" red\n    echo \"unsupported architecture: $ARCH\"\n    exit 1\n  fi\n}\n\ngenerate_password() {\n  tr -cd 'a-zA-Z0-9!#$%&()*+?@[]^_' </dev/urandom |\n    fold -w 32 |\n    head -n 1\n}\n\n#"}