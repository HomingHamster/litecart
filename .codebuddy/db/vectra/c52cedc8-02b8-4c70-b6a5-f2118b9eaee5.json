{"chunk":3,"numChunks":6,"fileHash":"kqzL6hiUzfhDaPxybtCNhqouSY95n/N8+hEE5SHlufU=","filePath":"pkg/update/update.go","content":"package update\nfunc Init(cfg *Config) error {\n\tif runtime.GOOS == \"windows\" {\n\t\tif err := archive.ExtractZip(assetArch, extractDir); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tif err := archive.ExtractTar(assetArch, extractDir); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// Replacing the executable\n\tfmt.Print(\"Replacing the executable...\\n\")\n\toldExec, err := os.Executable()\n\tif err != nil {\n\t\treturn err\n\t}\n\trenamedOldExec := oldExec + \".old\"\n\tdefer os.Remove(renamedOldExec)\n\n\tnewExec := filepath.Join(extractDir, cfg.ArchiveExecutable)\n\tif _, err := os.Stat(newExec); err != nil {\n\t\tnewExec = newExec + \".exe\"\n\t\tif _, fallbackErr := os.Stat(newExec); fallbackErr != nil {\n\t\t\treturn fmt.Errorf(\"The executable in the extracted path is missing or it is inaccessible: %v, %v\", err, fallbackErr)\n\t\t}\n\t}\n\n\tif err := os.Rename(oldExec, renamedOldExec); err != nil {\n\t\treturn err\n\t}\n\n\t// replace with the extracted binary"}