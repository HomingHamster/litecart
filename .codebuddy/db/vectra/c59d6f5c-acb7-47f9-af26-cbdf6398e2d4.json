{"chunk":1,"numChunks":3,"fileHash":"HNRx7OrKlGOpqnI1LMjeH+DYlSl9Jidd6C9XRMoY+yY=","filePath":"pkg/litepay/helper_test.go","content":"package litepay\nfunc Test_signMessage(t *testing.T) {\n\tprivKey, _ := rsa.GenerateKey(rand.Reader, 2048)\n\tprivKey1Bytes := x509.MarshalPKCS1PrivateKey(privKey)\n\tprivKey1Pem := pem.EncodeToMemory(&pem.Block{\n\t\tType:  \"RSA PRIVATE KEY\",\n\t\tBytes: privKey1Bytes,\n\t})\n\tprivKey8Bytes, _ := x509.MarshalPKCS8PrivateKey(privKey)\n\tprivKey8Pem := pem.EncodeToMemory(&pem.Block{\n\t\tType:  \"PRIVATE KEY\",\n\t\tBytes: privKey8Bytes,\n\t})\n\n\tcases := []struct {\n\t\tmessage string\n\t\tprivKey string\n\t\terr     error\n\t}{\n\t\t{\"Hello, World!\", string(privKey8Pem), nil},\n\t\t{\"Hello, World!\", string(privKey1Pem), errors.New(\"x509: failed to parse private key (use ParsePKCS1PrivateKey instead for this key format)\")},\n\t\t{\"Hello, World!\", \"\", errors.New(\"invalid private key\")},\n\t}\n\n\tfor _, tt := range cases {\n\t\t_, err := signMessage(tt.message, tt.privKey)\n\t\tassert.Equal(t, tt.err, err)\n\t}\n}"}