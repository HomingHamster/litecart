{"chunk":10,"numChunks":15,"fileHash":"sNFErEHWkfr6++8yIcF3xn47MiE1g3sZi3O+hgMIx1g=","filePath":"internal/queries/products.go","content":"package queries\nfunc (q *ProductQueries) ProductImages(ctx context.Context, id string) (*[]models.File, error) {\n\timages := []models.File{}\n\n\tquery := `SELECT id, name, ext FROM product_image\tWHERE product_id = ?`\n\trows, err := q.DB.QueryContext(ctx, query, id)\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn nil, errors.ErrProductNotFound\n\t\t}\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar img models.File\n\t\tif err := rows.Scan(&img.ID, &img.Name, &img.Ext); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\timages = append(images, img)\n\t}\n\n\tif err = rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &images, nil\n}\n// AddImage attaches an image to a product by inserting a new record in the product_image table.\nfunc (q *ProductQueries) AddImage(ctx context.Context, productID, fileUUID, fileExt, origName string) (*models.File, error) {\n\tfile := &models.File{\n\t\tID:   security.RandomString(),\n\t\tName: fileUUID,\n\t\tExt:  fileExt,\n\t}\n\n\tquery := `INSERT INTO product_image (id, product_id, name, ext, orig_name) VALUES (?, ?, ?, ?, ?)`\n\t_, err := q.DB.ExecContext(ctx, query, file.ID, productID, file.Name, file.Ext, origName)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn file, nil\n}\n// DeleteImage handles the deletion of a product image."}