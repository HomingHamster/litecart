{"chunk":0,"numChunks":1,"fileHash":"qFRmEgbp67NrWZuzQ21zaYJ1e7UMVXBPyWeVT+eRFe4=","filePath":"pkg/fsutil/folder.go","content":"package fsutil\n\nimport (\n\t\"io\"\n\t\"os\"\n)\n\n// IsDir reports whether the named directory exists.\nfunc IsDir(path string) bool {\n\tif path == \"\" || len(path) > 468 {\n\t\treturn false\n\t}\n\n\tif fi, err := os.Stat(path); err == nil {\n\t\treturn fi.IsDir()\n\t}\n\treturn false\n}\n\n// IsEmptyDir reports whether the named directory is empty.\nfunc IsEmptyDir(dirPath string) bool {\n\tf, err := os.Open(dirPath)\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer f.Close()\n\n\t_, err = f.Readdirnames(1)\n\treturn err == io.EOF\n}\n\n// Workdir get\nfunc Workdir() string {\n\tdir, _ := os.Getwd()\n\treturn dir\n}\n\n// MkDirs batch make multi dirs at once\nfunc MkDirs(perm os.FileMode, dirPaths ...string) error {\n\tfor _, dirPath := range dirPaths {\n\t\tif !IsDir(dirPath) {\n\t\t\tif err := os.MkdirAll(dirPath, perm); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\n// MkSubDirs batch make multi sub-dirs at once\nfunc MkSubDirs(perm os.FileMode, parentDir string, subDirs ...string) error {\n\tfor _, dirName := range subDirs {\n\t\tdirPath := parentDir + \"/\" + dirName\n\t\tif !IsDir(dirPath) {\n\t\t\tif err := os.MkdirAll(dirPath, perm); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n"}