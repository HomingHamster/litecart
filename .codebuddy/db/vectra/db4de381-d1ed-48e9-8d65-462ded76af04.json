{"chunk":0,"numChunks":1,"fileHash":"U/GnKleahD34BJ40LUb7d42EL97VhFpqNZMrroK1uNM=","filePath":"internal/base/base.go","content":"package base\n\nimport (\n\t\"database/sql\"\n\t\"embed\"\n\t\"fmt\"\n\n\t\"github.com/pressly/goose/v3\"\n\t\"github.com/shurco/litecart/pkg/fsutil\"\n)\n\n// New is ...\nfunc New(dbPath string, migrations embed.FS) (db *sql.DB, err error) {\n\tif !fsutil.IsFile(dbPath) {\n\t\t// create db\n\t\tif _, err = fsutil.OpenFile(dbPath, fsutil.FsCWFlags, 0o666); err != nil {\n\t\t\treturn\n\t\t}\n\n\t\t// first migrate db\n\t\tif err = Migrate(dbPath, migrations); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\t// connect to database\n\tdsn := fmt.Sprintf(\"%s?_pragma=busy_timeout(10000)&_pragma=journal_mode(WAL)&_pragma=journal_size_limit(200000000)&_pragma=synchronous(NORMAL)&_pragma=foreign_keys(ON)\", dbPath)\n\tdb, err = sql.Open(\"sqlite\", dsn)\n\tdb.Query(\"PRAGMA auto_vacuum\")\n\n\treturn\n}\n\n// Migrate is ...\nfunc Migrate(dbPath string, migrations embed.FS) (err error) {\n\tgoose.SetBaseFS(migrations)\n\tvar db *sql.DB\n\tdb, err = goose.OpenDBWithDriver(\"sqlite\", dbPath)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer db.Close()\n\n\tgoose.SetTableName(\"migrate_db_version\")\n\n\terr = goose.Up(db, \".\")\n\treturn\n}\n"}