{"chunk":1,"numChunks":3,"fileHash":"AfCyQ6Snlb+SlFVONwpxveJBuIYNmZ3EjocmeC7ltq4=","filePath":"internal/queries/pages.go","content":"package queries\nfunc (q *PageQueries) ListPages(ctx context.Context, private bool, idList ...string) ([]models.Page, error) {\n\tpages := []models.Page{}\n\n\tquery := `SELECT id, name, slug, position, active, seo, strftime('%s', created), strftime('%s', updated) FROM page`\n\tif !private {\n\t\tquery = query + ` WHERE active = 1`\n\t}\n\n\tstmt, err := q.DB.PrepareContext(ctx, query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer stmt.Close()\n\n\trows, err := stmt.QueryContext(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar page models.Page\n\t\tvar seo sql.NullString\n\t\tvar updated sql.NullInt64\n\n\t\terr := rows.Scan(&page.ID, &page.Name, &page.Slug, &page.Position, &page.Active, &seo, &page.Created, &updated)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif updated.Valid {\n\t\t\tpage.Updated = updated.Int64\n\t\t}\n\n\t\tif seo.Valid {\n\t\t\tif err = json.Unmarshal([]byte(seo.String), &page.Seo); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tpages = append(pages, page)\n\t}\n\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn pages, nil\n}\n// Page retrieves a single page from the database based on its slug."}