{"chunk":2,"numChunks":3,"fileHash":"HNRx7OrKlGOpqnI1LMjeH+DYlSl9Jidd6C9XRMoY+yY=","filePath":"pkg/litepay/helper_test.go","content":"package litepay\nfunc Test_parseBody(t *testing.T) {\n\tcases := []struct {\n\t\tbody     string\n\t\texpected map[string]any\n\t\terr      error\n\t}{\n\t\t{\n\t\t\tbody:     `{\"name\": \"John\", \"age\": 30}`,\n\t\t\texpected: map[string]any{\"name\": \"John\", \"age\": float64(30)},\n\t\t\terr:      nil,\n\t\t},\n\t\t{\n\t\t\tbody:     `{\"key\": \"value\"}`,\n\t\t\texpected: map[string]any{\"key\": \"value\"},\n\t\t\terr:      nil,\n\t\t},\n\t\t{\n\t\t\tbody:     `{`,\n\t\t\texpected: nil,\n\t\t\terr:      errors.New(\"error decoding request body\"),\n\t\t},\n\t}\n\n\tfor _, tt := range cases {\n\t\tr := strings.NewReader(tt.body)\n\t\tdata, err := parseBody(r)\n\t\tassert.Equal(t, tt.err, err)\n\t\tassert.Equal(t, tt.expected, data)\n\t}\n}"}