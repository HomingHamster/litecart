{"chunk":0,"numChunks":1,"fileHash":"U/dR7KMWAjiH5ReorKp8L1ndGjXs6Dm0cB2FGgV5QNo=","filePath":"pkg/archive/tar.go","content":"package archive\nimport (\n\t\"archive/tar\"\n\t\"compress/gzip\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"time\"\n)\n// TarArchive is ...\ntype TarArchive struct {\n\tdir  string\n\ttarw *tar.Writer\n\tgzw  *gzip.Writer\n\tfile io.Closer\n}\n// NewTarArchive is ...\nfunc NewTarArchive(w io.WriteCloser) Archive {\n\tgzw := gzip.NewWriter(w)\n\ttarw := tar.NewWriter(gzw)\n\treturn &TarArchive{\"\", tarw, gzw, w}\n}\n// Directory is ...\nfunc (a *TarArchive) Directory(name string) error {\n\ta.dir = name + \"/\"\n\treturn a.tarw.WriteHeader(&tar.Header{\n\t\tName:     a.dir,\n\t\tMode:     0755,\n\t\tTypeflag: tar.TypeDir,\n\t\tModTime:  time.Now(),\n\t})\n}\n// Header is ...\nfunc (a *TarArchive) Header(fi os.FileInfo) (io.Writer, error) {\n\thead, err := tar.FileInfoHeader(fi, \"\")\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"can't make tar header: %v\", err)\n\t}\n\thead.Name = a.dir + head.Name\n\tif err := a.tarw.WriteHeader(head); err != nil {\n\t\treturn nil, fmt.Errorf(\"can't add tar header: %v\", err)\n\t}\n\treturn a.tarw, nil\n}\n// Close is ...\nfunc (a *TarArchive) Close() error {\n\tif err := a.tarw.Close(); err != nil {\n\t\treturn err\n\t}\n\tif err := a.gzw.Close(); err != nil {\n\t\treturn err\n\t}\n\treturn a.file.Close()\n}\n// Extract extracts the tar archive at src to dest."}