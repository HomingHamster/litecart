{"chunk":8,"numChunks":9,"fileHash":"QZ9HSztfAPTAK+jz/PH8NqcGg/fNPvUV/NhCsYhVn58=","filePath":"internal/queries/cart.go","content":"package queries\nfunc (q *CartQueries) CartLetterPurchase(ctx context.Context, cartID string) (*models.MessageMail, error) {\n\t}\n\n\tif err := tx.Commit(); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Construct the purchases information.\n\tvar purchases strings.Builder\n\tcount := 1\n\tif len(keys) > 0 {\n\t\tpurchases.WriteString(\"Keys:\\n\")\n\t\tfor _, key := range keys {\n\t\t\tpurchases.WriteString(fmt.Sprintf(\"%v: %s\\n\", count, key.Content))\n\t\t\tcount++\n\t\t}\n\t}\n\tif len(files) > 0 {\n\t\tpurchases.WriteString(\"Files:\\n\")\n\t\tfor _, file := range files {\n\t\t\tpurchases.WriteString(fmt.Sprintf(\"%v: %s\\n\", count, file.OrigName))\n\t\t\tcount++\n\t\t}\n\t}\n\n\t// Fetch the 'mail_letter_purchase' setting value.\n\tmailLetter, err := db.GetSettingByKey(ctx, \"email\", \"mail_letter_purchase\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := json.Unmarshal([]byte(mailLetter[\"mail_letter_purchase\"].Value.(string)), &mail.Letter); err != nil {\n\t\treturn nil, err\n\t}\n\n\tmail.Data = map[string]string{\n\t\t\"Purchases\":   purchases.String(),\n\t\t\"Admin_Email\": mailLetter[\"email\"].Value.(string),\n\t}\n\tmail.Files = files\n\n\treturn mail, nil"}