{"chunk":10,"numChunks":16,"fileHash":"OT1E1nCU/oF1uHBrV3/HQPWCZYVu1GcjnTiimB778ug=","filePath":"internal/queries/products.go","content":"package queries\nfunc (q *ProductQueries) fetchProductImages(ctx context.Context, productID string) ([]productImage, error) {\n\tquery := `SELECT id, name, ext FROM product_image WHERE product_id = ?`\n\trows, err := q.DB.QueryContext(ctx, query, productID)\n\tif err != nil {\n\t\tif err == sql.ErrNoRows {\n\t\t\treturn nil, errors.ErrProductNotFound\n\t\t}\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tvar images []productImage\n\tfor rows.Next() {\n\t\tvar img productImage\n\t\tif err := rows.Scan(&img.ID, &img.Name, &img.Ext); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\timages = append(images, img)\n\t}\n\n\tif err = rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn images, nil\n}\nfunc (q *ProductQueries) mapToModelFiles(images []productImage) *[]models.File {\n\tresult := make([]models.File, len(images))\n\tfor i, img := range images {\n\t\tresult[i] = models.File{\n\t\t\tID:   img.ID,\n\t\t\tName: img.Name,\n\t\t\tExt:  img.Ext,\n\t\t}\n\t}\n\treturn &result\n}"}