{"chunk":4,"numChunks":6,"fileHash":"imwY4wUQn09mhFNJRd4eTEiv/yHDHMb5RBW4LzNA+S0=","filePath":"internal/handlers/private/setting.go","content":"package handlers\nfunc UpdateSetting(c *fiber.Ctx) error {\n\tdb := queries.DB()\n\tlog := logging.New()\n\tsettingKey := c.Params(\"setting_key\")\n\tvar request any\n\n\tswitch settingKey {\n\tcase \"password\":\n\t\trequest = &models.Password{}\n\tcase \"main\":\n\t\trequest = &models.Main{}\n\tcase \"auth\":\n\t\trequest = &models.Auth{}\n\tcase \"jwt\":\n\t\trequest = &models.JWT{}\n\tcase \"social\":\n\t\trequest = &models.Social{}\n\tcase \"payment\":\n\t\trequest = &models.Payment{}\n\tcase \"stripe\":\n\t\trequest = &models.Stripe{}\n\tcase \"paypal\":\n\t\trequest = &models.Paypal{}\n\tcase \"spectrocoin\":\n\t\trequest = &models.Spectrocoin{}\n\tcase \"webhook\":\n\t\trequest = &models.Webhook{}\n\tcase \"mail\":\n\t\trequest = &models.Mail{}\n\tdefault:\n\t\trequest = &models.SettingName{}\n\t}\n\n\t// Parse the request body into the appropriate struct\n\tif err := c.BodyParser(request); err != nil {\n\t\tlog.ErrorStack(err)\n\t\treturn webutil.StatusBadRequest(c, err.Error())\n\t}\n\n\t// Handle the password update separately if that's the case\n\tif settingKey == \"password\" {\n\t\tpassword := request.(*models.Password)\n\t\tif err := db.UpdatePassword(c.Context(), password); err != nil {\n\t\t\tlog.ErrorStack(err)\n\t\t\treturn webutil.StatusInternalServerError(c)\n\t\t}\n\t\treturn webutil.Response(c, fiber.StatusOK, \"Password updated\", nil)\n\t}\n\n\t// For default case where setting key doesn't match any predefined keys"}