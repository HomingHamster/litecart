{"chunk":5,"numChunks":6,"fileHash":"kqzL6hiUzfhDaPxybtCNhqouSY95n/N8+hEE5SHlufU=","filePath":"pkg/update/update.go","content":"package update\nfunc FetchLatestRelease(ctx context.Context, owner string, repo string) (*release, error) {\n\turl := fmt.Sprintf(\"https://api.github.com/repos/%s/%s/releases/latest\", owner, repo)\n\treq, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tres, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\n\trawBody, err := io.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif res.StatusCode >= 400 {\n\t\treturn nil, fmt.Errorf(\"(%d) failed to fetch latest releases:\\n%s\", res.StatusCode, string(rawBody))\n\t}\n\n\tresult := &release{}\n\tif err := json.Unmarshal(rawBody, result); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn result, nil\n}\nfunc (r *release) GetName() string {\n\treturn r.Name\n}\nfunc (r *release) GetUrl() string {\n\treturn r.Url\n}\nfunc downloadFile(ctx context.Context, url string, destPath string) error {\n\treq, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tres, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer res.Body.Close()\n\n\tif res.StatusCode >= 400 {\n\t\treturn fmt.Errorf(\"(%d) failed to send download file request\", res.StatusCode)\n\t}\n\n\tif err := os.MkdirAll(filepath.Dir(destPath), os.ModePerm); err != nil {\n\t\treturn err\n\t}\n\n\tdest, err := os.Create(destPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer dest.Close()\n\n\tif _, err := io.Copy(dest, res.Body); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}"}